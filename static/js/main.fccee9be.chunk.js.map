{"version":3,"sources":["components/Column/index.js","components/AddNewModal/index.js","components/Task/index.js","App.js","serviceWorker.js","index.js"],"names":["Column","_ref","column","handleAddNewTask","children","react_default","a","createElement","className","get","size","onClick","AddNewModal","props","type","checked","selectedColumn","onChange","handleChangeSelectedColumn","placeholder","value","taskContent","handleChangeTaskContent","handleToggleModal","Task","react_beautiful_dnd_esm","index","draggableId","task","isDragDisabled","isEditing","provided","Object","assign","draggableProps","dragHandleProps","ref","innerRef","defaultValue","handleEdit","handleCancelEdit","react","handleChooseEditTask","handleDeleteTask","App","state","displayModal","editedTaskIndex","editedTaskId","columns","fromJS","id","title","tasks","choosenColumn","arguments","length","undefined","_this","setState","prevState","e","target","trim","toastr","warning","timeOut","_this$state","newTask","uuidv1","content","time","Date","toLocaleString","columnIndex","findIndex","updatedColumn","updateIn","push","localStorage","setItem","JSON","stringify","toJS","taskIndex","window","confirm","remove","success","getIn","_this$state2","setIn","handleSaveDrag","result","source","destination","reason","sourceColumnIndex","droppableId","destinationColumnIndex","insert","getItem","this","parse","_this2","_this$state3","onDragEnd","map","components_Column","key","droppableProps","style","minHeight","components_Task","components_AddNewModal","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fccee9be.chunk.js","sourcesContent":["import React from 'react';\n\nimport './style.scss';\n\nconst Column = ({ column, handleAddNewTask, children }) => (\n    <div className=\"Column\">\n        <div className=\"Column__header\">\n            <h2 className=\"Column__title\">\n                <span className=\"Column__item-count\">{column.get('tasks').size}</span>\n                <span className=\"Column__text\">{column.get('title')}</span>\n            </h2>\n            <p className=\"Column__btn\" onClick={handleAddNewTask(column.get('id'))}>\n                <i className=\"fas fa-plus\"></i> New task\n            </p>\n        </div>\n        <div className=\"Column__content\">\n            {children}\n        </div>\n    </div>\n)\n\nexport default Column;\n","import React from 'react';\n\nimport './style.scss';\n\nconst AddNewModal = (props) => (\n    <div className=\"AddNewModal\">\n        <div className=\"AddNewModal__backdrop\"></div>\n        <div className=\"AddNewModal__content\">\n            <h4 className=\"AddNewModal__title\">\n                CREATE NEW TASK\n            </h4>\n            <div className=\"AddNewModal__task-status\">\n                <span className=\"AddNewModal__radio\">\n                    <input type=\"radio\"\n                        checked={props.selectedColumn === 'td'}\n                        onChange={props.handleChangeSelectedColumn('td')} />\n                    <span>TODO</span>\n                </span>\n                <span className=\"AddNewModal__radio\">\n                    <input type=\"radio\"\n                        checked={props.selectedColumn === 'ip'}\n                        onChange={props.handleChangeSelectedColumn('ip')} />\n                    <span>IN PROGRESS</span>\n                </span>\n                <span className=\"AddNewModal__radio\">\n                    <input type=\"radio\"\n                        checked={props.selectedColumn === 'de'}\n                        onChange={props.handleChangeSelectedColumn('de')} />\n                    <span>DONE</span>\n                </span>\n            </div>\n            <div className=\"AddNewModal__task\">\n                <input className=\"AddNewModal__input\"\n                    type=\"text\"\n                    placeholder=\"Enter your task...\"\n                    value={props.taskContent}\n                    onChange={props.handleChangeTaskContent} />\n            </div>\n            <div className=\"AddNewModal__action\">\n                <button className=\"AddNewModal__btn AddNewModal__btn--confirm\"\n                    onClick={props.handleAddNewTask}\n                >\n                    Save\n                </button>\n                <button className=\"AddNewModal__btn AddNewModal__btn--cancel\"\n                    onClick={props.handleToggleModal}\n                >\n                    Cancel\n                </button>\n            </div>\n        </div>\n    </div>\n)\n\nexport default AddNewModal;\n","import React, { Fragment } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport './style.scss';\n\nconst Task = (props) => (\n    <Draggable\n        index={props.index}\n        draggableId={props.task.get('id')}\n        isDragDisabled={props.isEditing}\n    >\n        {\n            provided => (\n                <div className=\"Task\"\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    ref={provided.innerRef}\n                >\n                    {\n                        props.isEditing\n                            ? <div className=\"Task__editing\">\n                                <input type=\"text\"\n                                    className=\"Task__editor\"\n                                    defaultValue={props.task.get('content')}\n                                    onChange={props.handleChangeTaskContent} />\n                                <div className=\"Task__editing-action\">\n                                    <i className=\"fas fa-check\" onClick={props.handleEdit}></i>\n                                    <i className=\"fas fa-ban\" onClick={props.handleCancelEdit}></i>\n                                </div>\n                                <div className=\"Task__editing-bgr\" onClick={props.handleCancelEdit}></div>\n                            </div>\n                            : <Fragment>\n                                {\n                                    props.task.get('time') &&\n                                    <div className=\"Task__time\">\n                                        <i className=\"far fa-calendar-alt\"></i> {props.task.get('time')}\n                                    </div>\n                                }\n\n                                <div className=\"Task__main\">\n                                    <div className=\"Task__content\">\n                                        {props.task.get('content')}\n                                    </div>\n                                    <div className=\"Task__action\">\n                                        <div className=\"Task__btn\" onClick={props.handleChooseEditTask}>\n                                            <i className=\"far fa-edit\"></i>\n                                        </div>\n                                        <div className=\"Task__btn\" onClick={props.handleDeleteTask}>\n                                            <i className=\"far fa-trash-alt\"></i>\n                                        </div>\n                                    </div>\n                                </div>\n                            </Fragment>\n                    }\n                </div>\n            )\n        }\n    </Draggable>\n)\n\nexport default Task;\n","import React, { Component } from 'react';\nimport toastr from 'toastr';\nimport 'toastr/build/toastr.min.css';\nimport uuidv1 from 'uuid/v1';\nimport { fromJS } from 'immutable'\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\n\nimport './style.scss';\nimport Column from './components/Column/';\nimport AddNewModal from './components/AddNewModal/';\nimport Task from './components/Task/';\n\nclass App extends Component {\n\n    state = {\n        displayModal: false,\n        selectedColumn: '',\n        taskContent: '',\n        editedTaskIndex: null,\n        editedTaskId: null,\n        columns: fromJS([\n            { id: 'td', title: 'TO DO', tasks: [] },\n            { id: 'ip', title: 'IN PROGRESS', tasks: [] },\n            { id: 'de', title: 'DONE', tasks: [] }\n        ])\n    }\n\n    componentDidMount() {\n        const columns = localStorage.getItem('columns');\n        if (columns) {\n            this.setState({ columns: fromJS(JSON.parse(columns)) });\n        }\n    }\n\n    handleToggleModal = (choosenColumn = '') => () => {\n        this.setState(prevState => ({\n            displayModal: !prevState.displayModal,\n            selectedColumn: choosenColumn\n        }));\n    }\n\n    handleChangeTaskContent = (e) => this.setState({ taskContent: e.target.value })\n\n    handleChangeSelectedColumn = (selectedColumn) => () => this.setState({ selectedColumn: selectedColumn })\n\n    handleAddNewTask = () => {\n        const { taskContent } = this.state\n        if (taskContent.trim() === '') {\n            toastr.warning('Please enter your task', 'Notice', { timeOut: 2000 });\n        } else {\n            const { selectedColumn, columns } = this.state;\n            const newTask = fromJS({\n                id: uuidv1(),\n                content: taskContent,\n                time: new Date().toLocaleString()\n            });\n            const columnIndex = columns.findIndex(column => column.get('id') === selectedColumn);\n            const updatedColumn = columns.updateIn([columnIndex, 'tasks'], tasks => tasks.push(newTask));\n            this.setState({\n                displayModal: false,\n                selectedColumn: '',\n                taskContent: '',\n                columns: fromJS(updatedColumn)\n            }, () => {\n                localStorage.setItem('columns', JSON.stringify(updatedColumn.toJS()));\n            });\n        }\n    }\n\n    handleDeleteTask = (columnIndex, taskIndex) => () => {\n        const result = window.confirm('Are your sure to delete this task?');\n        if (result) {\n            const { columns } = this.state;\n            const updatedColumn = columns.updateIn(\n                [columnIndex, 'tasks'],\n                tasks => tasks.remove(taskIndex));\n            this.setState({ columns: fromJS(updatedColumn) }, () => {\n                localStorage.setItem('columns', JSON.stringify(updatedColumn.toJS()));\n                toastr.success('Delete task success', 'Notice', { timeOut: 2000 });\n            });\n        }\n    }\n\n    handleChooseEditTask = (columnIndex, taskIndex) => () => {\n        const selectedColumn = this.state.columns.getIn([columnIndex, 'id']);\n        const task = this.state.columns.getIn([columnIndex, 'tasks', taskIndex]);\n        this.setState({\n            selectedColumn,\n            taskContent: task.get('content'),\n            editedTaskIndex: taskIndex,\n            editedTaskId: task.get('id')\n        })\n    }\n\n    handleEdit = () => {\n        const { columns, selectedColumn, taskContent, editedTaskIndex } = this.state;\n        const columnIndex = columns.findIndex(column => column.get('id') === selectedColumn);\n        const updatedColumn = columns.updateIn(\n            [columnIndex, 'tasks'],\n            tasks => tasks.setIn([editedTaskIndex, 'content'], taskContent)\n        );\n        this.setState({\n            selectedColumn: '',\n            taskContent: '',\n            editedTaskId: null,\n            editedTaskIndex: null,\n            columns: fromJS(updatedColumn)\n        }, () => {\n            localStorage.setItem('columns', JSON.stringify(updatedColumn.toJS()));\n        });\n    }\n\n    handleCancelEdit = () => {\n        this.setState({\n            selectedColumn: '',\n            taskContent: '',\n            editedTaskId: null,\n            editedTaskIndex: null\n        });\n    }\n\n    handleSaveDrag = (result) => {\n        const { source, destination, reason } = result;\n        if (reason === 'DROP' && destination) {\n            const { columns } = this.state;\n            const sourceColumnIndex = columns.findIndex(column => column.get('id') === source.droppableId);\n            const task = columns.getIn([sourceColumnIndex, 'tasks', source.index]);\n            let updatedColumn = columns.updateIn(\n                [sourceColumnIndex, 'tasks'],\n                tasks => tasks.remove(source.index)\n            );\n            const destinationColumnIndex = columns.findIndex(column => column.get('id') === destination.droppableId);\n            updatedColumn = updatedColumn.updateIn(\n                [destinationColumnIndex, 'tasks'],\n                tasks => tasks.insert(destination.index, task)\n            );\n            this.setState({\n                columns: fromJS(updatedColumn)\n            }, () => {\n                localStorage.setItem('columns', JSON.stringify(updatedColumn.toJS()));\n            });\n        }\n    }\n\n    render() {\n        const { columns, displayModal, selectedColumn, taskContent, editedTaskId } = this.state;\n\n        return (\n            <div className=\"App\">\n                <h1 className=\"App__title\">TO DO LIST</h1>\n                <DragDropContext onDragEnd={this.handleSaveDrag}>\n                    <div className=\"App__content\">\n                        {\n                            columns.map((column, columnIndex) => (\n                                <Column key={column.get('id')}\n                                    column={column}\n                                    handleAddNewTask={this.handleToggleModal}\n                                >\n                                    <Droppable droppableId={column.get('id')}>\n                                        {\n                                            provided => (\n                                                <div ref={provided.innerRef}\n                                                    {...provided.droppableProps}\n                                                    style={{ minHeight: '300px' }}\n                                                >\n                                                    {\n                                                        column.get('tasks').map((task, taskIndex) => (\n                                                            <Task key={task.get('id')}\n                                                                index={taskIndex}\n                                                                isEditing={task.get('id') === editedTaskId}\n                                                                handleChangeTaskContent={this.handleChangeTaskContent}\n                                                                task={task}\n                                                                handleEdit={this.handleEdit}\n                                                                handleCancelEdit={this.handleCancelEdit}\n                                                                handleChooseEditTask={this.handleChooseEditTask(columnIndex, taskIndex)}\n                                                                handleDeleteTask={this.handleDeleteTask(columnIndex, taskIndex)} />\n                                                        ))\n                                                    }\n                                                    {provided.placeholder}\n                                                </div>\n                                            )\n                                        }\n                                    </Droppable>\n                                </Column>\n                            ))\n                        }\n                    </div>\n                </DragDropContext>\n                {\n                    displayModal &&\n                    <AddNewModal selectedColumn={selectedColumn}\n                        taskContent={taskContent}\n                        handleChangeTaskContent={this.handleChangeTaskContent}\n                        handleChangeSelectedColumn={this.handleChangeSelectedColumn}\n                        handleAddNewTask={this.handleAddNewTask}\n                        handleToggleModal={this.handleToggleModal()} />\n                }\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}